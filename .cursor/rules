# Cursor Rules — EDColony C++ (Linux, Elite Dangerous)

## Загальні принципи
- Мова: C++20. Портативність для Linux x86_64, збірка через CMake.
- Продуктивність і низька латентність: жодних блокуючих викликів у рендері оверлею; IO/мережа — поза графічним потоком.
- Розділення процесів: оверлей (Vulkan layer) окремо від демона (журнали/мережа/кеш). Обмін — IPC (Unix domain sockets або shared memory).
- Безпека пам'яті: RAII, уникати сирих new/delete, за промовчанням std::unique_ptr, std::shared_ptr тільки за потреби.
- Обробка збоїв: чіткі таймаути, ретраї з jitter/backoff, відсутність падінь у графічному процесі.

## Оверлей (Vulkan Layer)
- Використовувати implicit layer, перехоплення vkCreateInstance, vkCreateDevice, vkQueuePresentKHR.
- Рендер через Dear ImGui (imgui_impl_vulkan). Жодної мережі/файлів у кадрі — лише читання останнього стану через IPC.
- Обов'язково: відпрацювання пересоздання swapchain, коректний sRGB, DPI-скейлінг шрифтів.
- Стабільність під Proton/DXVK: тестувати з типовими версіями Proton; маніфест шару в ~/.local/share/vulkan/implicit_layer.d/.

## Демон
- Старт як systemd user service. Мінімальне споживання CPU/IO, бекграундні задачі через неблокуючі таймери/очікування.
- Журнали Elite Dangerous (Proton): автодетект шляхів + можливість явного EDCOLONY_JOURNAL_DIR.
- Події: Docked, ColonisationConstructionDepot, Market, FSDJump. Дебаунс 300–500 мс перед мережевими оновленнями.
- HTTP клієнт: таймаути, ретраї, ETag/If-None-Match. Серіалізація JSON — nlohmann/json. TLS — системний trust store.
- Кеш: SQLite для активних проєктів/FC/Needs. Міграції версій.

## Код-стайл (C++)
- Вимикати макроси; надавати перевагу constexpr, enum class, span/string_view.
- Імена: типи PascalCase, змінні lower_snake_case, функції lowerCamelCase.
- Уникати глобальних станів; конфіг через env/CLI; залежності через явні конструктори.
- Тести (надалі): GoogleTest або Catch2, зібрані окремою опцією.

## Перевірки якості
- Компіляторні прапори: -Wall -Wextra -Wpedantic (без -Werror у релізі).
- Статичний аналіз: clang-tidy (надалі), без надмірних правил.
- Логування: спочатку std::cerr; далі — spdlog async.

## Обмеження
- Не використовувати блокуючі мережеві/файлові операції в оверлеї.
- Не підвантажувати великі шрифти/текстури у кадрі — робити це поза рендер-петлею.
- Уникати викликів, що можуть взаємодіяти з Proton/Steam поза офіційними API.
